
@import "syntax-variables";

atom-text-editor {
  background-color: @syntax-background-color;
  color: @syntax-text-color;

  .wrap-guide {
    background-color: @syntax-wrap-guide-color;
  }

  .indent-guide {
    color: @syntax-indent-guide-color;
  }

  .invisible-character {
    color: @syntax-invisible-character-color;
  }

  .gutter {
    background-color: @syntax-gutter-background-color;
    color: @syntax-gutter-text-color;

    .icon-right {
      color: @syntax-icon-text-color;
    }

    .line-number {
      &.cursor-line {
        position: relative;
        // line height fix to reduce flash of line height increase
        line-height: 1.4;
        border: 1px solid @syntax-gutter-margin-color-selected;
        border-right: none;
        border-left: none;
        background-color: @syntax-gutter-background-color-selected;
        color: @syntax-gutter-text-color-selected;

        .icon-right {
          color: @syntax-gutter-background-color;
        }
      }

      &.cursor-line-no-selection {
        color: @syntax-gutter-text-color-selected;
      }

      // git diff colours
      // &.git-line-renamed: {
      //   border-left-color: @syntax-color-renamed;
      // }
      &.git-line-added {
        border-left-color: @syntax-color-added;
      }
      &.git-line-modified {
        border-left-color: @syntax-color-modified;
      }
      &.git-line-removed:before {
        border-left-color: darken(@syntax-color-removed, 10%);
      }
    }
  }

  .gutter .line-number.folded,
  .gutter .line-number:after,
  .fold-marker:after {
    color: @light-gray;
  }

  .invisible {
    color: @syntax-text-color;
  }

  .cursor {
    color: @syntax-cursor-color;
  }

  .selection .region {
    background-color: @syntax-selection-color;
  }
}

atom-text-editor .selection .region {
  // fix to show search colour above the selected
  z-index: -2;
}

atom-text-editor .find-result .region {
  background-color: transparent;
  border: 1px solid @syntax-result-marker-color;
}

atom-text-editor .current-result .region {
  background-color: @syntax-result-marker-color-selected;
  border: 1px solid @syntax-result-marker-color-selected;
  // fix to show search colour above the selected
  z-index: -1;
}

.syntax--comment {
  color: @light-gray;
}

.syntax--keyword {
  color: #FF0095;

  &.syntax--control {
    color: #FF0095;
  }

  &.syntax--operator {
    color: @mustard;
  }

  &.syntax--other.syntax--special-method {
    color: @blue;
  }

  &.syntax--other.syntax--unit {
    color: white;
  }
}

// let var const ,etc.
.syntax--storage {
  color: @dark-violet;
}

.syntax--constant {
  color: white;

  &.syntax--boolean {
    color: @lime;
  }

  &.syntax--character.syntax--escape {
    color: @cyan;
  }

  &.syntax--numeric {
    color: white;
  }

  &.syntax--other.syntax--color {
    color: @cyan;
  }

  &.syntax--other.syntax--symbol {
    color: @green;
  }
}

.syntax--variable {
  color: @dark-violet;

  &.syntax--other {
    color: @dark-white;

    &.syntax--readwrite {
      &.syntax--instance {
        &.syntax--coffee {
          color: @dark-orange;
        }
      }
    }

    &.syntax--less {
      color: @dark-violet;
    }

    &.syntax--property {
      color: @mustard;
    }
  }

  &.syntax--interpolation {
    color: darken(@red, 10%);
  }

  &.syntax--parameter {
    &.syntax--misc {
      &.syntax--css {
        color: @light-orange;
      }
    }

    &.syntax--function {
      color: @dark-cyan;
    }
  }
}

.syntax--invalid.syntax--illegal {
  background-color: @red;
  color: @syntax-background-color;
  &.syntax--bad-ampersand {
	  background-color: transparent;
	  color: @syntax-text-color;
  }
}

.syntax--string {
  color: @dark-orange;

  &.syntax--quoted {
    &.syntax--json, &.syntax--coffee {
      color: @turquoise;

      & + .syntax--keyword.syntax--operator.syntax--coffee {
        // make an exception for all .string keys whose immediate parent is .value
        & + .syntax--string.syntax--quoted.syntax--coffee {
          color: @dark-white;
        }
      }

      & + .syntax--structure.syntax--dictionary.syntax--value.syntax--json {
        // make an exception for all .string keys whose immediate parent is .value
        .string.quoted.json {
          color: @dark-white;
        }
      }
    }
  }

  &.syntax--regexp {
    color: @cyan;

    .syntax--source.syntax--ruby.syntax--embedded {
      color: @light-orange;
    }
  }

  &.syntax--other.syntax--link {
    color: @red;
  }
}

.syntax--punctuation {
  &.syntax--definition {
    &.syntax--entity {
      color: white;
    }

    &.syntax--comment {
      color: @light-gray;
    }

    &.syntax--string,
    &.syntax--variable,
    &.syntax--parameters,
    &.syntax--array {
      color: @syntax-text-color;
    }

    &.syntax--heading,
    &.syntax--identity {
      color: @blue;
    }

    &.syntax--bold {
      color: @light-orange;
      font-weight: bold;
    }

    &.syntax--italic {
      color: @purple;
      font-style: italic;
    }
	&.syntax--tag {
		&.syntax--html {
			color: #5cafd6;
		}
	}
  }

  &.syntax--section.syntax--embedded {
    color: darken(@red, 10%);
  }

}

.syntax--support {
  &.class {
    color: @light-orange;
  }

  &.function  {
    color: #11CCFB;

    &.coffee {
      color: @magenta;
    }

    &.dom {
      color: @mustard;
    }
  }

  &.type {
    &.property-name {
      &.css {
        color: @turquoise;
      }
    }
  }
}

.syntax--entity {
  &.other {
    &.inherited-class {
      color: @green;
    }

    &.attribute-name {
      color: @cyan;
      &.css {
        color: white;
      }
    }

	&.pseudo-element {
		&.css {
			color: #F94747;
		}
	}
  }
  &.name {
    &.function {
      color: @dark-white;

      &.coffee {
        color: @dark-cyan;
      }

      &.constructor {
        color: @mustard;
      }
    }

    &.type {
      color: @dark-cyan;

      &.class, &.object.coffee {
        color: @light-orange;
      }
    }

    &.class {
      color: @light-orange;
    }

    &.section {
      color: @blue;
    }

    &.tag {
      color: #5cafd6;
      &.css {
        color: white;
      }
	  &.scss {
		  color: white;
	  }
    }
  }
}

.syntax--meta {
  &.class {
    color: @light-orange;
  }

  &.link {
    color: @orange;
  }

  &.require {
    color: @blue;
  }

  &.selector {
    color: @purple;
  }

  &.separator {
    background-color: @gray;
    color: @syntax-text-color;
  }

  &.method-call {
    color: @mustard;
  }
}

.syntax--none {
  color: @syntax-text-color;
}

.syntax--markup {
  &.bold {
    color: @orange;
    font-weight: bold;
  }

  &.changed {
    color: @purple;
  }

  &.deleted {
    color: @red;
  }

  &.italic {
    color: @purple;
    font-style: italic;
  }

  &.heading .punctuation.definition.heading {
    color: @blue;
  }

  &.inserted {
    color: @green;
  }

  &.list {
    color: @red;
  }

  &.quote {
    color: @orange;
  }

  &.raw.inline {
    color: @green;
  }
}

.syntax--css {
	.property-name {
		color: #34d1c4;
	}
}

.syntax--source.gfm .markup {
  -webkit-font-smoothing: auto;
  &.heading {
    color: @amber;
  }
}
